/*
- C++표준라이브러리 
std 네임스페이스 안에 모든 클래스와 함수가 정의되어 있다.
핵심은 제네릭컨테이너, 제네릭알고리즘이다. 이는 템플릿이 많아 STL 이라고 불린다.
성능 및 속도면에서 더 좋거나 동등수준 이상으로 생각된다.

템플릿은 제네릭 프로그래밍을 위한 수단으로 작업 대상 객체의 종류에 상관없이 코드를 작성할 수 있게 해준다.

1. 문자열 <string> 
string클래스를 지원한다. 모든면에서 c의 문자배열보단 우월하다고 할 수있다.
메모리 보호를 위한 인덱스 경계 검사, 대입, 비교, 문자열 연결, 문자열 추출, 문자열 치환 등 여러 기능을 사용 할 수 있다.
유니코드와 로컬라이제이션을 지원한다.

2. 정규표현식 <regex>
문자열 처리에 이용되는 패턴 매칭을 쉽게 해준다.

3. I/O 스트림
스트림이라는 입출력에 대한 새로운 모델을 선보임. 파일, 콘솔, 문자열, 키보드를 통해 읽고쓰는 함수들을 제공한다.

4. 스마트포인터
객체를 삭제하지 않아 메모리에 계속 쌓여 낭비하는 메모리릭.
메모리 공간을 이미 반환하여 다른 용도로 사용되고 있을 수 있는데 해당 메모리를 계속 참조하는 댕글링포인터.
이미 메모리를 해제 했는데 또 해제하려고 하는 더블프리.
이런 문제를 해결하기 위해 unique_ptr, shared_ptr, weak_ptr 이라는 개념을 도입하였다. <memory> 에 정의

5. 익셉션
함수나 메서드에서 호출 깊이와 관꼐 없이 여러 타입의 에러 정보를 전달 할 수 있게하는 익셉션
<exception>, <stdexcept>, <system_error> 에서 정의 사용자가 확장 개발 가능

6. 수학유틸리티
템플릿으로 만들어져 있지만 STL로 취급하진 않는다.
<complex> 복소수, <ratio> 유리수 계산(정밀도를 잃지 않음), <limits> 현재 플랫폼에서의 int 최댓값등을 구하기 위해 사용

7. 시간유틸리티
<chrono>

8. 난수
<random> 난수 엔진, 난수 엔진 어댑터, 난수 분포 등을 포함

9. 초기화 리스트
<initializer_list> 다수의 인자를 함수에 넘기기 위해 사용

10. 페어와 튜플
<utility> pair - 서로 다른 타입의 항목을 하나의 객체에 담을 수 있다. (이종 항목 저장)
<tuple> tuple

11. 함수 객체
함수 호출 연산자를 오버로딩하고 있는 클래스를 함수 객체라 한다. STL에 predicate(조건 검사 수행 주체).
http://hyeonstorage.tistory.com/314

12. 멀티스레딩
<thread>를 통해 멀티스레드 코드를 작성할 수 있느 도구를 제공
<atomic> 중간에 다른쓰레드의 방해를 받지 않고 한번에 실행을 완료 할 수 있게하는 아토믹 장치
<condition_variable>, <mutax> 스레드 간 동기화 장치

13. 타입속성
<type_tratis> 타입속성을 이용하면 컴파일 타임에 타입에 대한 정보를 활용할 수 있다.
http://moonlit-lab.blogspot.com/2015/05/c-typetraits.html

14. STL
컨테이너 와 알고리즘을 제공한다.

14-1. STL컨테이너
컨테이너와 그 안에 저장될 엘리먼트로 구성된다.
모든 컨테이너는 템플릿으로 구성되어 있다.

vector - 나열을 저장하고 랜덤 액세스 가능. 추가할때 마다 자동적으로 크기가 변화, 인덱스 경계 검사도 자동으로 실행, 연속된 메모리에 저장
크기가 커질 수록 삽입 삭제가 느려진다. 항목에 빨리 접근해야 된다면 벡터, 삽입 삭제가 많다면 다른걸..

list -  이중연결리스트. 메모리에 연속적으로 위치하지 않을 수 있음, 항목을 찾거나 접근하는 시간은 느리지만 삽입 삭제가 빠르다.

forward_list - 단방향 연결 리스트. 순방향 순회만 지원하며 리스트보다 메모리를 적게 소요

dequq - vector 와 비슷한 데이터 구조 double-ended-queue로 탐색에 빠른 성능을 제공하고, 양끝에 삽입 삭제도 빠른 성능이다. 사실상 vector 와 list로도 충분하다.

array - C스타일의 배열 고정적인 크기로 오버헤드가 발생하지 않는다.

queue - 선입선출

priority_queue - 우선순위큐

stack - 선입후출 후입선출

set - 순서를 가진 중복이 안되는 집합 multiset은 중복을 허용

map - 키와 밸류를 가지고 키에 근거하여 저장 순위를 가지고 있다. multimap 은 중복허용

hashtable - 비순차 연관 컨테이너 unordered_map, set, multimap, multiset

bitset - int, long 타입을 비트별로 의미를 부여하여 플래그의 집합으로 사용

*/